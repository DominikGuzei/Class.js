{"ts":1350415709925,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function (global) {\n\n  /**\n   * Class.js namespace\n   *\n   * @namespace Class\n   */\n  var Class = {\n    /**\n     * Creates and returns a new JavaScript 'class' as constructor function.\n     *\n     * @param {String|undefined} classPath Namespace plus class name: 'my.awesome.Hero'\n     * @param {Object} definition Properties and methods that are added to the prototype\n     *\n     * @returns {Function} constructor The constructor of the created class\n     */\n    'design': function () {\n      var args = arguments;\n      var body = args[args.length - 1];\n      var className = args.length > 1 ? args[0] : null;\n\n      var SuperClass = body['Extends'] || null;\n      delete body['Extends'];\n\n      var implementations = body['Implements'];\n      delete body['Implements'];\n\n      var NewClass = body['initialize'];\n      delete body['initialize'];\n\n      if(!NewClass) {\n        if(SuperClass) {\n          NewClass = function() { SuperClass.apply(this, arguments); };\n        } else {\n          NewClass = function() {};\n        }\n      }\n\n      applyConstructorName(NewClass, className);\n\n      applySuperClass(NewClass, SuperClass)\n\n      applyImplementations(NewClass, implementations);\n\n      applyClassNameToPrototype(NewClass, className);\n\n      Class.extend(NewClass, body, true);\n\n      return NewClass;\n    },\n\n    /**\n     * Extend the given class prototype with properties and methods\n     *\n     * @param {Function} ExistingClass Constructor of existing class\n     * @param {Object} extension Properties and methods that are added to the prototype\n     * @param {Boolean|undefined} override Specify if the extension should override existing properties\n     */\n    'extend': function (ExistingClass, extension, override) {\n      if (extension['STATIC']) {\n        extend(ExistingClass, extension['STATIC'], override);\n        delete extension['STATIC'];\n      }\n      extend(ExistingClass.prototype, extension, override);\n    }\n  };\n\n  function applySuperClass(NewClass, SuperClass) {\n    if (SuperClass) {\n      var SuperClassProxy = function() {};\n      SuperClassProxy.prototype = SuperClass.prototype;\n\n      NewClass.prototype = new SuperClassProxy();\n      NewClass.prototype.constructor = NewClass;\n\n      NewClass['Super'] = SuperClass;\n\n      Class.extend(NewClass, SuperClass, false);\n    }\n  };\n\n  function applyImplementations(NewClass, implementations) {\n    if (implementations) {\n      if(typeof implementations === 'function') {\n        implementations = [implementations];\n      }\n      for (var i = 0; i < implementations.length; i++) {\n        extend(NewClass.prototype, implementations[i].prototype, false);\n      }\n    }\n  };\n\n  function applyConstructorName(NewClass, name) {\n    NewClass['toString'] = function() { return name; };\n  };\n\n  function applyClassNameToPrototype(NewClass, name) {\n    NewClass.prototype['toString'] = function() { return name; };\n  };\n\n  function applyMethodName(method, name) {\n    method['toString'] = function() { return name; };\n  };\n\n  function extend(object, extension, shouldOverride) {\n    var propertyName, property;\n\n    for (propertyName in extension) {\n      if(shouldOverride || !shouldOverride && !(propertyName in object)) {\n\n        property = object[propertyName] = extension[propertyName];\n\n        if(typeof property === 'function') {\n          var isObjectExtension = (extension.toString === Object.prototype.toString)\n          var className = isObjectExtension ? object.constructor : extension.constructor;\n\n          applyMethodName(property, className + \"::\" + propertyName);\n        }\n      }\n    }\n  };\n\n  // Return as AMD module or attach to head object\n  if (typeof define !== \"undefined\") {\n    define([], function () { return Class; });\n  }\n  else if (typeof window !== \"undefined\") {\n    window['Class'] = Class;\n  }\n  else {\n    module['exports'] = Class;\n  }\n\n})(this);"]],"start1":0,"start2":0,"length1":0,"length2":3865}]],"length":3865}
{"contributors":[],"silentsave":false,"ts":1350415740772,"patch":[[{"diffs":[[0,"erClass)"],[1,";"],[0,"\n\n      "]],"start1":1126,"start2":1126,"length1":16,"length2":17},{"diffs":[[0,"oString)"],[1,";"],[0,"\n       "]],"start1":3394,"start2":3394,"length1":16,"length2":17}]],"length":3867,"saved":false}
{"ts":1350415929520,"patch":[[{"diffs":[[0,"tion"],[-1," (global"],[1,"("],[0,") {\n"]],"start1":5,"start2":5,"length1":16,"length2":9},{"diffs":[[0,"     }\n    }\n  }"],[-1,";"],[0,"\n"],[1,""],[0,"\n  function appl"]],"start1":2635,"start2":2635,"length1":34,"length2":33},{"diffs":[[0,"urn name; };\n  }"],[-1,";"],[0,"\n\n  function app"]],"start1":2746,"start2":2746,"length1":33,"length2":32},{"diffs":[[0,"urn name; };\n  }"],[-1,";"],[0,"\n\n  function app"]],"start1":2872,"start2":2872,"length1":33,"length2":32},{"diffs":[[0,"name; };\n  }"],[-1,";"],[0,"\n\n  function"]],"start1":2978,"start2":2978,"length1":25,"length2":24},{"diffs":[[0," }\n    }\n  }"],[-1,";"],[0,"\n\n  // Retur"]],"start1":3569,"start2":3569,"length1":25,"length2":24},{"diffs":[[0," }\n\n"],[1,""],[0,"})("],[-1,"this"],[0,");"]],"start1":3842,"start2":3842,"length1":13,"length2":9}]],"length":3851,"saved":false}
